package io.camunda.demo.pick_animal;

import io.camunda.zeebe.client.ZeebeClient;
import io.camunda.zeebe.client.api.response.ProcessInstanceEvent;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import io.camunda.zeebe.client.ZeebeClient;
import io.camunda.zeebe.client.api.command.DeployResourceCommandStep1;
import io.camunda.zeebe.client.api.response.ActivatedJob;
import io.camunda.zeebe.client.api.response.DeploymentEvent;
import io.camunda.zeebe.client.api.response.PublishMessageResponse;
import io.camunda.zeebe.process.test.api.ZeebeTestEngine;
import io.camunda.zeebe.process.test.assertions.BpmnAssert;
import io.camunda.zeebe.process.test.extension.ZeebeProcessTest;

import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ZeebeSpringTest
class PickAnimalApplicationTest {

    @MockBean
    private ZeebeClient zeebeClient;

    @InjectMocks
    private PickAnimalApplication pickAnimalApplication;

    @Test
    void contextLoads() {
        // Ensure that the Spring Boot context loads without issues.
        assertThat(pickAnimalApplication).isNotNull();
    }

    @Test
    void testRunMethodStartsProcessInstance() {
        // Arrange: Create a mock ProcessInstanceEvent to return from the ZeebeClient
        ProcessInstanceEvent mockEvent = mock(ProcessInstanceEvent.class);
        when(mockEvent.getProcessInstanceKey()).thenReturn(12345L);

        // Mock the behavior of the ZeebeClient
        when(zeebeClient.newCreateInstanceCommand()
                .bpmnProcessId("animalPickingProcessId")
                .latestVersion()
                .send()
                .join())
                .thenReturn(mockEvent);

        // Act: Run the application (it calls ZeebeClient internally)
        pickAnimalApplication.run();

        // Assert: Verify the interaction with ZeebeClient and check process instance
        // creation
        verify(zeebeClient).newCreateInstanceCommand();
        assertThat(mockEvent.getProcessInstanceKey()).isEqualTo(12345L);
    }
}
